**
* Macros
*
       .defm call
       li   r11,$+10
       mov  r11,*sp+
       b    #1
       .endm

       .defm ret
       dect sp
       mov  *sp,r11
       b    *r11
       .endm

       .defm ret_eq
       dect sp
       mov  *sp,r11
       c    r11,r11
       b    *r11
       .endm

       .defm proc
       mov  r11,*sp+
       .endm

       .defm endproc
       dect sp
       mov  *sp,r11
       b    *r11
       .endm

       .defm push
       mov  #1,*sp+
       .endm

       .defm pop
       dect sp
       mov  *sp,#1
       .endm

       .defm peek
       mov  @-2(sp),#1
       .endm

       .defm clear
       inc  bc
       a    bc,hl
       dec  de
!      clr  *de+
       dect bc
       jne  -!
       .endm

       .defm fill
       movb *hl,r0
       swpb r0
       movb *hl,r0
       inc  bc
       a    bc,hl
       dec  de
!      mov  r0,*de+
       dect bc
       jne  -!
       .endm

       .defm ldir
!      movb *hl+,*de+
       dec  bc
       jne  -!
       .endm

       .defm ldir2
!      mov  *hl+,*de+
       dect bc
       jne  -!
       .endm

       .defm lddr
!      movb *hl,*de
       dec  hl
       dec  de
       dec  bc
       jne  -!
       .endm

       .defm exx
       mov  bc,r0
       mov  bc_,bc
       mov  r0,bc_
       mov  hl,r0
       mov  hl_,hl
       mov  r0,hl_
       mov  de,r0
       mov  de_,de
       mov  r0,de_
       .endm

       .defm ex_de_hl
       mov  de,r0
       mov  hl,de
       mov  r0,hl
       .endm

       .defm ex_af_af_
       mov  af,r0
       mov  af_,af
       mov  r0,af_
       .endm

       .defm ex_sp_hl
       mov  hl,r0
       mov  @-2(sp),hl
       mov  r0,@-2(sp)
       .endm

       .defm daa
       mov  a,r0
       andi r0,>0f00
       cb   r0,@bytes+>09
       jle  !
       ab   @bytes+>06,a
!      mov  a,r0
       andi r0,>f000
       srl  r0,4
       cb   r0,@bytes+>b09
       jle  !
       ab   @bytes+>60,a
!
       .endm
