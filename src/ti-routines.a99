*********************************************************************
*
* Setup environment
*
ti_setup_environment:
       li   one,>0100
       li   r0,>fffe
       mov  r0,@b255
       clr  @frame
       li   sp,stack
       .proc
       bl   @init_bits
       bl   @copy_to_pad
       bl   @graphics_mode
       .endproc
*// ti_setup_environment

*********************************************************************
*
* Init bits for bit operations
*
init_bits:
       li   r0,>0100
       li   r1,bits
       li   r2,8
init_bits_1:
       movb r0,*r1+
       sla  r0,1
       dec  r2
       jne  init_bits_1
       rt
*// init_bits

*********************************************************************
*
* Copy routines to pad
*
copy_to_pad:
;       li   r0,draw_display_buffer_start
;       li   r1,draw_display_buffer_pad
;       li   r2,draw_display_buffer_end-draw_display_buffer_start
;copy_to_pad_1:
;       mov  *r0+,*r1+
;       dect r2
;       jne  copy_to_pad_1
       rt
*// copy_to_pad

*********************************************************************
*
* Set graphics mode
*
graphics_mode:
       lwpi ti_wrksp
       clr  r0
       li   r1,vdp_registers
       li   r2,8
graphics_mode_1:
       movb *r1+,@ti_r0lb
       bl   @vwtr                      ; Set register
       ai   r0,>0100
       dec  r2
       jne  graphics_mode_1
*      Clear VDP RAM
       clr  r0
       clr  r1
       li   r2,>4000
       bl   @vsmw
*      Disable sprites
       li   r0,sprite_attr_table
       li   r1,>d000
       bl   @vsbw
*      Init color table
       li   r0,color_table
       li   r1,>f100
       li   r2,>1800
       bl   @vsmw
*      Init name tables
       li   r0,name_table
       bl   @vwad
       bl   @ti_init_name_table
       li   r0,name_table_2
       bl   @vwad
       bl   @ti_init_name_table
*      Sprite patterns
;       li   r0,sprite_pattern_table
;       li   r1,SPR0
;       li   r2,32
;       bl   @vmbw
       lwpi wrksp
       rt
*      VDP registers
vdp_registers:
       byte >02                        ; Graphics II mode
       byte >e2                        ; 16K, display on, interrupt enabled
       byte name_table/>400            ; Name table
       byte >ff                        ; Color table
       byte pattern_table/>800+>03     ; Pattern table
       byte sprite_attr_table/>80      ; Sprite attribute table
       byte sprite_pattern_table/>800  ; Sprite pattern table
       byte >00                        ; Backdrop color
*// graphics_mode

*********************************************************************************
*
* Initialize name table for bitmap drawing
*
ti_init_name_table:
       clr  r1
       li   r2,768
ti_init_name_table_1:
       movb r1,@vdpwd
       ai   r1,>0100
       dec  r2
       jne  ti_init_name_table_1
       rt
*// ti_init_name_table

*********************************************************************************
*
* Display off
*
ti_display_off:
       lwpi ti_wrksp
       li   r0,>01a2
       bl   @vwtr
       lwpi wrksp
       rt
*// ti_display_off

*********************************************************************************
*
* Display off
*
ti_display_on:
       lwpi ti_wrksp
       li   r0,>01e2
       bl   @vwtr
       lwpi wrksp
       rt
*// ti_display_on

*********************************************************************************
*
* Set border color
*
* a: zx color
*
ti_set_border_color:
       .proc
       bl   @ti_color
       srl  r0,12
       ori  r0,>0700
       bl   @vwtr
       .endproc
*// ti_set_border_color

*********************************************************************************
*
* Get TI-99 color from ZX Spectrum color
*
* a: Colour-byte FBPPPIII
*  - I - Ink colour (0-7)
*  - P - Paper colour (0-7)
*  - B - Bright (0-No, 1-Yes)
*  - F - Flash  (0-No, 1-Yes)
*
* On return r0 MSB contains the TI color FFFFBBBB.
*
ti_color:
       clr  r0                       ; Result
       mov  a,r2
       andi r2,>4000                 ; Bright bit
       srl  r2,3
*      Foreground
       mov  a,r1
       andi r1,>0700                 ; Foreground bits
       soc  r2,r1
       swpb r1
       movb @ti_pal(r1),r0
       sla  r0,4
*      Background
       mov  a,r1
       andi r1,>3800                 ; Background bits
       srl  r1,3
       soc  r2,r1
       swpb r1
       socb @ti_pal(r1),r0
       rt

* Spectrum palette
* 0  Black,    1 D Blue,   2 D Red,     3 D Magenta
* 4  D Green,  5 D Cyan,   6 D Yellow,  7 Grey
* 8  Black,    9 Blue,    10 Red,      11 Magenta
* 12 Green,   13 Cyan,    14 Yellow,   15 White

* TI palette
* 0  Trans,    1 Black,    2 M Green,   3 L Green
* 4  D Blue,   5 L Blue,   6 D Red,     7 Cyan
* 8  M Red,    9 L Red,   10 D Yellow, 11 L Yellow
* 12 D Green, 13 Magenta, 14 Gray,     15 White

ti_pal  byte 1,4,6,13,12,7,10,14,1,5,8,13,2,7,11,15
* Not used: 3 L Green, 9 L Red
* Not available: D Cyan, D Magenta
*// ti_color

*********************************************************************************
*
* Upload main ZX screen buffer
*
upload_zx_screen:
       lwpi ti_wrksp
       mov  @wrksp+20,r10
       clr  r0
       li   r14,zx_screen
       li   r15,zx_attrs
       bl   @upload_screen_part
       li   r0,>800
       li   r14,zx_screen+>800
       li   r15,zx_attrs+>100
       bl   @upload_screen_part
       li   r0,>1000
       li   r14,zx_screen+>1000
       li   r15,zx_attrs+>200
       bl   @upload_screen_part
       lwpi wrksp
       rt
*// upload_zx_screen

*********************************************************************************
*
* Upload top 3rd of main ZX screen buffer
*
upload_top_part:
       lwpi ti_wrksp
       mov  @wrksp+20,r10
       clr  r0
       li   r14,zx_screen
       li   r15,zx_attrs
       bl   @upload_screen_part
       lwpi wrksp
       rt
*// upload_middle_part

*********************************************************************************
*
* Upload middle 3rd of main ZX screen buffer
*
upload_middle_part:
       lwpi ti_wrksp
       mov  @wrksp+20,r10
       li   r0,>800
       li   r14,zx_screen+>800
       li   r15,zx_attrs+>100
       bl   @upload_screen_part
       lwpi wrksp
       rt
*// upload_middle_part

*********************************************************************************
*
* Upload bottom 3rd of main ZX screen buffer
*
upload_bottom_part:
       lwpi ti_wrksp
       mov  @wrksp+20,r10
       li   r0,>1000
       li   r14,zx_screen+>1000
       li   r15,zx_attrs+>200
       bl   @upload_screen_part
       lwpi wrksp
       rt
*// upload_bottom_part

*********************************************************************************
*
* Upload screen part
*
* r0: VDP table offset
* r14: Screen address
* r15: Attributes address
*
upload_screen_part:
       .proc
       li   r13,vdpwd
       li   r1,>0100
*      Patterns
       ai   r0,pattern_table
       bl   @vwad
       mov  r14,r4
       a    r1,r14
       mov  r14,r5
       a    r1,r14
       mov  r14,r6
       a    r1,r14
       mov  r14,r7
       a    r1,r14
       mov  r14,r8
       a    r1,r14
       mov  r14,r9
       a    r1,r14
       mov  r14,r11
       a    r1,r14
       mov  r14,r12
       a    r1,r14
       li   r3,256
upload_screen_part_1:
       movb *r4+,*r13
       movb *r5+,*r13
       movb *r6+,*r13
       movb *r7+,*r13
       movb *r8+,*r13
       movb *r9+,*r13
       movb *r11+,*r13
       movb *r12+,*r13
       dec  r3
       jne  upload_screen_part_1
*      Colors
       ai   r0,color_table-pattern_table
       bl   @vwad
       li   r2,>100
upload_screen_part_2:
       movb *r15+,r1
       srl  r1,8
       movb @ti_colors(r1),r0
       movb r0,*r13
       movb r0,*r13
       movb r0,*r13
       movb r0,*r13
       movb r0,*r13
       movb r0,*r13
       movb r0,*r13
       movb r0,*r13
       dec  r2
       jne  upload_screen_part_2
       .endproc
*// upload_screen_buffer

*********************************************************************************
*
* Upload a single pattern
*
* r1 (r14): Address in the ZX screen buffer (xxxsslllrrrccccc)
*
upload_pattern:
       seto r0
       li   r2,1
       jmp  upload_characters_0
*// upload_pattern

*********************************************************************************
*
* Upload patterns
*
* r1 (r14): Address in the ZX screen buffer (xxxsslllrrrccccc)
* r2 (r15): Number of characters
*
upload_patterns:
       seto r0
       jmp  upload_characters_0
*// upload_patterns

*********************************************************************************
*
* Upload a single character
*
* r1 (r14): Address in the ZX screen buffer (xxxsslllrrrccccc)
*
upload_character:
       li   r2,1
*      Continue into upload_characters
*// upload_character

*********************************************************************************
*
* Upload characters
*
* r1 (r14): Address in the ZX screen buffer (xxxsslllrrrccccc)
* r2 (r15): Number of characters
*
* xxxs slll rrrc cccc -> 000ssrrrccccc000
*
upload_characters:
       clr  r0                         ; If not zero, only patterns are uploaded.
upload_characters_0:
       lwpi ti_wrksp
       mov  r14,r0                     ; Screen address
       andi r0,>1800                   ; Keep only s bits
       mov  r14,r1                     ; Screen address again
       andi r1,>00ff                   ; Keep only r and c bits
       sla  r1,3                       ; Shift into place
       soc  r1,r0                      ; And combine
       mov  r0,r1                      ; Copy it back
       srl  r1,3                       ; This is the attribute offset
       bl   @vwad
       li   r3,vdpwd
       li   r4,256
       mov  r15,r2                     ; Number of characters
upload_characters_1:
       movb *r14,*r3
       a    r4,r14
       movb *r14,*r3
       a    r4,r14
       movb *r14,*r3
       a    r4,r14
       movb *r14,*r3
       a    r4,r14
       movb *r14,*r3
       a    r4,r14
       movb *r14,*r3
       a    r4,r14
       movb *r14,*r3
       a    r4,r14
       movb *r14,*r3
       ai   r14,-(7*256)+1
       dec  r2
       jne  upload_characters_1
       abs  r13
       jne  upload_characters_3
       ai   r0,>2000                   ; Change VDP address to colors
       bl   @vwad
       mov  r1,r4
       ai   r4,zx_attrs
upload_characters_2:
       movb *r4+,r1                    ; Get attribute
       srl  r1,8                       ; Shift into LSB
       movb @ti_colors(r1),r1          ; Get TI color
       movb r1,*r3
       movb r1,*r3
       movb r1,*r3
       movb r1,*r3
       movb r1,*r3
       movb r1,*r3
       movb r1,*r3
       movb r1,*r3
       dec  r15
       jne upload_characters_2
upload_characters_3:
       lwpi wrksp
       rt
*// upload_characters

*********************************************************************************
*
* Upload top and middle attributes
*
upload_top_middle_attributes:
       li   r1,zx_attrs
       li   r2,512
       jmp  upload_attributes
*// upload_top_middle_attributes

*********************************************************************************
*
* Upload a single attribute
*
* r1 (r14): Address in the ZX attribute buffer
*
upload_attribute:
       li   r2,1
*      Continue into upload_attributes
*// upload_attribute

*********************************************************************************
*
* Upload color attributes
*
* r1 (r14): Address in the ZX attribute buffer
* r2 (r15): Number of attributes
*
upload_attributes:
       lwpi ti_wrksp
       mov  r14,r0                     ; Attribute address
       ai   r0,-zx_attrs               ; Offset
       sla  r0,3                       ; TI colors offset
       ai   r0,color_table
       bl   @vwad
upload_attributes_1:
       movb *r14+,r1                   ; Get attribute
       srl  r1,8                       ; Shift into LSB
       movb @ti_colors(r1),r1          ; Get TI color
       li   r3,vdpwd
       movb r1,*r3
       movb r1,*r3
       movb r1,*r3
       movb r1,*r3
       movb r1,*r3
       movb r1,*r3
       movb r1,*r3
       movb r1,*r3
       dec  r15
       jne upload_attributes_1
       lwpi wrksp
       rt
*// upload_attributes

*********************************************************************************
*
* Upload sprite patterns
*
upload_sprite_patterns:
       .proc
       li   r0,sprite_pattern_table
       bl   @vwad
*
       li   r0,extra_sprite
       bl   @upload_sprite_pattern
*
       li   r0,guardian_sprites
       li   r1,8
upload_sprite_patterns_1:
       bl   @upload_sprite_pattern
       dec  r1
       jne  upload_sprite_patterns_1
*
       li   r0,willy_sprites
       li   r1,8
upload_sprite_patterns_2:
       bl   @upload_sprite_pattern
       dec  r1
       jne  upload_sprite_patterns_2
*
       li   r0,portal_sprites
       bl   @upload_sprite_pattern
       .endproc
*// upload_sprite_patterns

*********************************************************************************
*
* Upload sprite pattern
*
upload_sprite_pattern:
       li   r2,16
upload_sprite_pattern_1:
       movb *r0,@vdpwd
       inct r0
       dec  r2
       jne  upload_sprite_pattern_1
       ai   r0,-31
       li   r2,16
upload_sprite_pattern_2:
       movb *r0,@vdpwd
       inct r0
       dec  r2
       jne  upload_sprite_pattern_2
       dec  r0
       rt
*// upload_sprite_patterns

*********************************************************************************
*
* Prepare for drawing hardware sprites
*
init_sprite_attr_table:
       li   r0,sprite_attr_table       ; Prepare for drawing hardware sprites
       mov  r0,@sprite_attr_table_addr
       movb @vdpsta,r0
       rt
*// init_sprite_attr_table

*********************************************************************************
*
* Upload a hardware sprite to the TMS9918A sprite attribute table
*
* de: Address of sprite graphic data
* hl: Address to draw at in the ZX Spectrum screen (xxxsslllrrrccccc)
*
ti_draw_sprite:
       .proc
       mov  @sprite_attr_table_addr,r0
       jeq  ti_draw_sprite_3
       bl   @vwad
**
* Y
*
       mov  hl,r1
       andi r1,>1fe0
       srl  r1,5
       movb @sprite_y(r1),@vdpwd
**
* X
*
       mov  hl,r1
       andi r1,>001f
       sla  r1,3
       swpb r1
       movb r1,@vdpwd
**
* Pattern
*
       mov  de,r1
       ai   r1,-sprite_patterns
       srl  r1,3
       swpb r1
       movb r1,@vdpwd
**
* Color
*
       ci   de,willy_sprites
       jl   ti_draw_sprite_1
       li   r1,>0e00                   ; Willy is a grey guy
       jmp  ti_draw_sprite_2
ti_draw_sprite_1:                      ; For other sprites we have to get their color from attributes
       mov  hl,r1                      ; Start with screen address
       andi r1,>00ff                   ; Row and column
       mov  hl,r0                      ; Screen address again
       andi r0,>1800                   ; 3rd of screen
       srl  r0,3                       ; Shift down to a value of 256 bytes per 3rd
       soc  r0,r1                      ; Now r1 holds the offset into the attribute table
       movb @zx_attrs(r1),r1           ; Get attribute
       srl  r1,8                       ; Shift into LSB
       movb @ti_colors(r1),r1          ; Get TI color
       srl  r1,4                       ; We need foreground color
       jmp  ti_draw_sprite_2
ti_draw_sprite_2:
       movb r1,@vdpwd
       inct  @sprite_attr_table_addr
       inct  @sprite_attr_table_addr
ti_draw_sprite_3:
       .endproc
sprite_attr_table_addr:
       data 0
*// ti_draw_sprite


*********************************************************************
*
* Close hardware sprite table
*
close_sprite_attr_table:
       .proc
       mov  @sprite_attr_table_addr,r0
       bl   @vwad
       li   r0,>d000                    ; Write sprite attribute table terminator
       movb r0,@vdpwd
       .endproc
*// close_sprite_attr_table

*********************************************************************
*
* Reset hardware sprite table
*
reset_sprite_attr_table:
       .proc
       li   r0,sprite_attr_table
       bl   @vwad
       li   r0,>d000
       movb r0,@vdpwd
       clr  @sprite_attr_table_addr
       .endproc
*// reset_sprite_attr_table

*********************************************************************
*
* VDP Write To Register
*
* R0 MSB: VDP register to write to
* R0 LSB: Value to write
*
vwtr:
       swpb r0
       movb r0,@vdpwa                  ; Send low byte (value) to write to VDP register
       swpb r0
       ori  r0,>8000                   ; Set up a VDP register write operation (10)
       movb r0,@vdpwa                  ; Send high byte (address) of VDP register
       rt
*// vwtr

*********************************************************************
*
* VDP Set Write Address
*
* R0: Write address in VDP RAM
*
vwad:
       swpb r0
       movb r0,@vdpwa                  ; Send low byte of VDP RAM write address
       swpb r0
       ori  r0,>4000                   ; Set read/write bits 14 and 15 to write (01)
       movb r0,@vdpwa                  ; Send high byte of VDP RAM write address
       rt
*// vwad

*********************************************************************
*
* VDP Single Byte Write
*
* R0: Write address in VDP RAM
* R1: MSB of R1 sent to VDP RAM
*
vsbw:
       swpb r0
       movb r0,@vdpwa                  ; Send low byte of VDP RAM write address
       swpb r0
       ori  r0,>4000                   ; Set read/write bits 14 and 15 to write (01)
       movb r0,@vdpwa                  ; Send high byte of VDP RAM write address
       movb r1,@vdpwd                  ; Write byte to VDP RAM
       rt
*// vsbw

*********************************************************************
*
* VDP multiple Byte Write
*
* R0: Write address in VDP RAM
* R1: Starting read address in CPU RAM
* R2: Number of bytes to send
*
vmbw:
       swpb r0
       movb r0,@vdpwa                  ; Send low byte of VDP RAM write address
       swpb r0
       ori  r0,>4000                   ; Set read/write bits 14 and 15 to write (01)
       movb r0,@vdpwa                  ; Send high byte of VDP RAM write address
       li   r0,vdpwd
vmbw_1:
       movb *r1+,*r0                   ; Write byte to VDP RAM
       dec  r2
       jne  vmbw_1
       rt
*// vmbw

*********************************************************************
*
* VDP Single Byte Multiple Write
*
* R0: Write address in VDP RAM
* R1: MSB of R1 sent to VDP RAM
* R2: Number of bytes to write to VDP RAM
*
vsmw:
       swpb r0
       movb  r0,@vdpwa                 ; Send low byte of VDP RAM write address
       swpb r0
       ori  r0,>4000                   ; Set read/write bits 14 and 15 to write (01)
       movb r0,@vdpwa                  ; Send high byte of VDP RAM write address
       li   r0,vdpwd
vsmw_1:
       movb r1,*r0                     ; Write byte to VDP RAM
       dec  r2                         ; Byte counter
       jne  vsmw_1
       rt
*// vsmw

*********************************************************************
*
* VDP Set Read Address
*
* R0: Read address in VDP RAM
*
;vrad:
;       swpb r0
;       movb r0,@vdpwa                  ; Send low byte of VDP RAM read address
;       swpb r0
;       movb r0,@vdpwa                  ; Send high byte of VDP RAM read address
;       rt
;*// vrad

;*********************************************************************
;*
;* VDP Single Byte Read
;*
;* R0:  Read address in VDP RAM
;* R1:  MSB of R1 set to byte from VDP RAM
;*
;vsbr:
;       swpb r0
;       movb r0,@vdpwa                  ; Send low byte of VDP RAM read address
;       swpb r0
;       movb r0,@vdpwa                  ; Send high byte of VDP RAM read address
;       nop
;       movb @vdprd,r1                  ; Read byte from VDP RAM
;       rt
;*// vsbr

*********************************************************************
*
* VDP Multiple Byte Read
*
* R0: Starting read address in VDP RAM
* R1: Starting write address in CPU RAM
* R2: Number of bytes to read from VDP RAM
*
* Modifies R0-R2
*
vmbr:
       swpb r0
       movb  r0,@vdpwa                 ; Send low byte of VDP RAM read address
       swpb r0
       andi r0,>3fff                   ; Set read/write bits 14 and 15 to read (00)
       movb r0,@vdpwa                  ; Send high byte of VDP RAM read address
       li   r0,vdprd
vmbr_1:
       movb *r0,*r1+                   ; Read byte from VDP RAM
       dec  r2                         ; Byte counter
       jne  vmbr_1                     ; Check if finished
       rt
*// vmbr

*********************************************************************
*
* Mute sound
*
mute_sound:
       li   r0,>9fbf
       movb r0,@sound
       swpb r0
       movb r0,@sound
       rt
*// mute_sound

*********************************************************************
*
* Check key
*
* r0: Column in MSB: >0000 - >0700, Row in LSB: >0006 - >0014
*
*       Column   0      1    2    3    4    5     6       7
*     Row
*     >0006      =      .    ,    M    N    /    Fire    Fire
*     >0008    Space    L    K    J    H    ;    Left    Left
*     >000A    Enter    O    I    U    Y    P    Right   Right
*     >000C             9    8    7    6    0    Down    Down
*     >000E    Fctn     2    3    4    5    1    Up      Up
*     >0010    Shift    S    D    F    G    A
*     >0012    Ctrl     W    E    R    T    Q
*     >0014             X    C    V    B    Z
*
* On return NEQ means that the key is pressed
*
KEY_FI EQU  >0606
KEY_LF EQU  >0608
KEY_RG EQU  >060A
KEY_DN EQU  >060C
KEY_UP EQU  >060E
KEY_CM EQU  >0206
KEY_FS EQU  >0106
KEY_0  EQU  >050C
KEY_1  EQU  >050E
KEY_2  EQU  >010E
KEY_3  EQU  >020E
KEY_4  EQU  >030E
KEY_5  EQU  >040E
KEY_6  EQU  >040C
KEY_7  EQU  >030C
KEY_8  EQU  >020C
KEY_9  EQU  >010C
KEY_A  EQU  >0510
KEY_B  EQU  >0414
KEY_C  EQU  >0214
KEY_D  EQU  >0210
KEY_E  EQU  >0212
KEY_F  EQU  >0310
KEY_G  EQU  >0410
KEY_H  EQU  >0408
KEY_I  EQU  >020A
KEY_J  EQU  >0308
KEY_K  EQU  >0208
KEY_L  EQU  >0108
KEY_M  EQU  >0306
KEY_N  EQU  >0406
KEY_O  EQU  >010A
KEY_P  EQU  >050A
KEY_Q  EQU  >0512
KEY_R  EQU  >0312
KEY_S  EQU  >0110
KEY_T  EQU  >0412
KEY_U  EQU  >030A
KEY_V  EQU  >0314
KEY_W  EQU  >0112
KEY_X  EQU  >0114
KEY_Y  EQU  >040A
KEY_Z  EQU  >0514
KEY_SP EQU  >0008
KEY_EN EQU  >000A
KEY_FN EQU  >000E
KEY_SH EQU  >0010
KEY_CT EQU  >0012
JOY_FI EQU  >0606
JOY_LT EQU  >0608
JOY_RT EQU  >060A
JOY_DN EQU  >060C
JOY_UP EQU  >060E
*
ti_check_key:
       li   r12,>0024                  ; CRU address of the column decoder
       ldcr r0,3                       ; Select column
       andi r0,>00ff
       mov  r0,r12                     ; Select row
       tb   0                          ; Test key, EQ if not pressed
       rt
*// ti_check_key

***************************************************************************
*
* Check quit
*
ti_check_quit:
       clr  r1                         ; Test column 0
       li   r12,>0024                  ; Address for column selection
       ldcr r1,3                       ; Select column
       li   r12,>0006                  ; Address to read rows
       stcr r1,8
       andi r1,>1100
       jeq  ti_quit
*      Return
       rt
*      Quit
ti_quit:
       clr  @>83c4                     ; Reset user ISR address
       seto @>6000                     ; Select first ROM bank
       blwp @>0000
*// ti_check_quit

***************************************************************************
*
* Wait for fire key
*
ti_wait_fire:
       .proc
ti_wait_fire_1:
       li   r0,JOY_FI
       bl   @ti_check_key
       jeq  ti_wait_fire_1
       .endproc
*// ti_wait_fire

*********************************************************************
*
* Wait for vertical retrace (CRU)
*
ti_vsync:
       .proc
       movb @vdpsta,@vdp_status
ti_vsync_1:
       clr  r12
       tb   2                          ; Test CRU bit for VDP interrupt
       jeq  ti_vsync_1
;       bl   @module_player
       .endproc
*// ti_vsync

*********************************************************************
*
* Wait for r0 frames
*
ti_delay:
       .proc
ti_delay_1:
       bl   @ti_vsync
       dec  r0
       jne  ti_delay_1
       .endproc
*// ti_delay


*********************************************************************
*
* Add tile to the list of updated tiles
*
init_tile_updates:
       li   r0,tiles_updates
       li   r2,tile_updates_size/2
!      clr  *r0+
       dec  r2
       jne  -!
       rt
*// init_crumble_updates

*********************************************************************
*
* Add tile to the list of updated tiles
*
* r1: Screen buffer address of tile to add
*
add_tile_update:
       li   r0,tiles_updates
add_crumble_update_0:
       mov  *r0,r2                     ; Address
       jeq  add_crumble_update_3
       c    *r0,r1
       jne  add_crumble_update_1
add_crumble_update_3:
       mov  r1,*r0+
       li   r2,2                       ; Counter
       mov  r2,*r0
       jmp  add_crumble_update_2
add_crumble_update_1:
       ai   r0,4
       ci   r0,tiles_updates+tile_updates_size
       jne  add_crumble_update_0
add_crumble_update_2:
       rt
*// add_crumble_update

*********************************************************************
*
* CPU space copy
*
copy:
       srl  bc,3
copy_1:
       mov  *hl+,*de+
       mov  *hl+,*de+
       mov  *hl+,*de+
       mov  *hl+,*de+
       dec  bc
       jne  copy_1
       rt
*// copy

*********************************************************************
*
* CPU space fill
*
fill:
       movb a,r0
       swpb r0
       movb a,r0
       srl  bc,3
fill_1:
       mov  r0,*de+
       mov  r0,*de+
       mov  r0,*de+
       mov  r0,*de+
       dec  bc
       jne  fill_1
       rt
*// fill

*********************************************************************
*
* CPU space clear
*
clear:
       srl  bc,3
clear_1:
       clr  *de+
       clr  *de+
       clr  *de+
       clr  *de+
       dec  bc
       jne  clear_1
       rt
*// clear

*********************************************************************
*
* Data
*
* Given the row data (sslllrrr) of a ZX-Spectrum screen address (xxxsslllrrrccccc) as index,
* this table contains the TMS9918A sprite y coordinate (ssrrrlll - 1) & 0xff.
*
sprite_y:
       byte >ff,>07,>0f,>17,>1f,>27,>2f,>37,>00,>08,>10,>18,>20,>28,>30,>38
       byte >01,>09,>11,>19,>21,>29,>31,>39,>02,>0a,>12,>1a,>22,>2a,>32,>3a
       byte >03,>0b,>13,>1b,>23,>2b,>33,>3b,>04,>0c,>14,>1c,>24,>2c,>34,>3c
       byte >05,>0d,>15,>1d,>25,>2d,>35,>3d,>06,>0e,>16,>1e,>26,>2e,>36,>3e
       byte >3f,>47,>4f,>57,>5f,>67,>6f,>77,>40,>48,>50,>58,>60,>68,>70,>78
       byte >41,>49,>51,>59,>61,>69,>71,>79,>42,>4a,>52,>5a,>62,>6a,>72,>7a
       byte >43,>4b,>53,>5b,>63,>6b,>73,>7b,>44,>4c,>54,>5c,>64,>6c,>74,>7c
       byte >45,>4d,>55,>5d,>65,>6d,>75,>7d,>46,>4e,>56,>5e,>66,>6e,>76,>7e
       byte >7f,>87,>8f,>97,>9f,>a7,>af,>b7,>80,>88,>90,>98,>a0,>a8,>b0,>b8
       byte >81,>89,>91,>99,>a1,>a9,>b1,>b9,>82,>8a,>92,>9a,>a2,>aa,>b2,>ba
       byte >83,>8b,>93,>9b,>a3,>ab,>b3,>bb,>84,>8c,>94,>9c,>a4,>ac,>b4,>bc
       byte >85,>8d,>95,>9d,>a5,>ad,>b5,>bd,>86,>8e,>96,>9e,>a6,>ae,>b6,>be
       byte >bf,>c7,>cf,>d7,>df,>e7,>ef,>f7,>c0,>c8,>d0,>d8,>e0,>e8,>f0,>f8
       byte >c1,>c9,>d1,>d9,>e1,>e9,>f1,>f9,>c2,>ca,>d2,>da,>e2,>ea,>f2,>fa
       byte >c3,>cb,>d3,>db,>e3,>eb,>f3,>fb,>c4,>cc,>d4,>dc,>e4,>ec,>f4,>fc
       byte >c5,>cd,>d5,>dd,>e5,>ed,>f5,>fd,>c6,>ce,>d6,>de,>e6,>ee,>f6,>fe

tile_updates_size:
       equ  12
tiles_updates:
       bss  tile_updates_size

light_beam_attr_addrs:
       bss  80
