* Cavern name
*
* The cavern name is copied here and then used by the routine at #R34436.
cavernname:                            ; 32768
       bss 32

* Cavern tiles
*
* The cavern tiles are copied here by the routine at #R34436 and then used to
* draw the cavern by the routine at #R35445.
* .
* The extra tile at #R32863 behaves like a floor tile, and is used as such in
* #R54272(The Endorian Forest), #R55296(Attack of the Mutant Telephones),
* #R57344(Ore Refinery), #R58368(Skylab Landing Bay) and #R59392(The Bank). It
* is also used in #R47104(The Menagerie) as spider silk, and in #R52224(Miner
* Willy meets the Kong Beast) and #R56320(Return of the Alien Kong Beast) as a
* switch.
background:                            ; 32800
       bss 9                                                         ; Background tile (also used by the routines at #R35515,
                                                                     ; #R35770, #R36211, #R36344, #R37173 and #R37471)
floor:                                 ; 32809
       bss 9                                                         ; Floor tile (also used by the routine at #R36211)
crumbling:                             ; 32818
       bss 9                                                         ; Crumbling floor tile (also used by the routine at
                                                                     ; #R35515)
wall:                                  ; 32827
       bss 9                                                         ; Wall tile (also used by the routines at #R35515, #R35805
                                                                     ; and #R36211)
conveyor:                              ; 32836
       bss 9                                                         ; Conveyor tile (also used by the routine at #R35805)
nasty1:                                ; 32845
       bss 9                                                         ; Nasty tile 1 (also used by the routines at #R35515 and
                                                                     ; #R37471)
nasty2:                                ; 32854
       bss 9                                                         ; Nasty tile 2 (also used by the routines at #R35515 and
                                                                     ; #R37471)
extra:                                 ; 32863
       bss 9                                                         ; Extra tile (also used by the routine at #R37403)

* Willy's y-coordinate
*
* Initialised by the routine at #R34436, and used by the routines at #R35515,
* #R35805, #R37434 and #R37503. Holds the LSB of the address of the entry in
* the screen buffer address lookup table at #R33536 that corresponds to Willy's
* pixel y-coordinate; in practice, this LSB is twice Willy's actual pixel
* y-coordinate.
willy_y:                               ; 32872
       byte 0

* Willy's animation frame
*
* Initialised upon entry to a cavern or after losing a life by the routine at
* #R34436, used by the routine at #R37503, and updated by the routine at
* #R35805. Possible values are 0, 1, 2 and 3.
frame:                                 ; 32873
       byte 0

* Willy's direction and movement flags
*
* Initialised by the routine at #R34436.
* .
* #TABLE(default,centre,:w)
* { =h Bit(s) | =h Meaning | =h Used by }
* { 0 | Direction Willy is facing (reset=right, set=left) | #R35805, #R37503 }
* { 1 | Willy's movement flag (set=moving) | #R35515, #R35805 }
* { 2-7 | Unused (always reset) | }
* TABLE#
dmflags:                               ; 32874
       byte 0

* Airborne status indicator
*
* Initialised by the routine at #R34436, and used by the routines at #R34574,
* #R35515, #R35805 and #R36101. Possible values are:
* .
* #TABLE(default,centre,:w)
* { =h Value | =h Meaning }
* { #b0      | Willy is neither falling nor jumping }
* { #b1      | Willy is jumping }
* { #b2-#b11 | Willy is falling, and can land safely }
* { #b12+    | Willy is falling, and has fallen too far to land safely (see
* #R35805#35805) }
* { #b255    | Willy has collided with a nasty or a guardian (see #R36101) }
* TABLE#
airborne:                              ; 32875
       byte 0

* Address of Willy's location in the attribute buffer at #N23552
*
* Initialised by the routine at #R34436, used by the routines at #R35515,
* #R36805, #R37403, #R37434 and #R37503, and updated by the routine at #R35805.
location:                              ; 32876
       data 0

* Jumping animation counter
*
* Initialised by the routine at #R34436, and used by the routines at #R35515
* and #R35805.
jumping:                               ; 32878
       byte 0

* Conveyor definition
*
* The conveyor definition is copied here by the routine at #R34436.
convdir:                               ; 32879
       byte 0                                                        ; Direction (0=left, 1=right; used by the routines at
                                                                     ; #R35805 and #R37125)
convloc:                               ; 32880
       data 0                                                        ; Address of the conveyor's location in the screen buffer
                                                                     ; at #R28672 (used by the routine at #R37125)
convlen:                               ; 32882
       byte 0                                                        ; Length (used by the routine at #R37125)

* Border colour
*
* Initialised and used by the routine at #R34436, and also used by the routines
* at #R34574, #R35515 and #R37173.
border:                                ; 32883
       byte 0

* Attribute of the last item drawn
*
* Used by the routines at #R36344 and #R36707. Holds the attribute byte of the
* last item drawn, or #b0 if all the items have been collected.
itemattr:                              ; 32884
       byte 0

* Item definitions
*
* The item definitions are copied here by the routine at #R34436, and then used
* by the routine at #R36707. An item definition contains the following
* information:
* .
* #TABLE(default,centre,:w)
* { =h Byte(s) | =h Contents }
* { 0 | Current attribute }
* { 1,2 | Address of the item's location in the attribute buffer at #R23552 }
* { 3 | MSB of the address of the item's location in the screen buffer at
* #R24576 }
* { 4 | Unused (always #b255) }
* TABLE#
items:                                 ; 32885
       bss 5                                                         ; Item 1
       bss 5                                                         ; Item 2
       bss 5                                                         ; Item 3
       bss 5                                                         ; Item 4
       bss 5                                                         ; Item 5
       byte 0                                                        ; Terminator (set to #b255)

* Portal definition
*
* The portal definition is copied here by the routine at #R34436.
portal:                                ; 32911
       byte 0                                                        ; Attribute byte (used by the routines at #R36707 and
                                                                     ; #R36805)
portalg:                               ; 32912
       bss 32                                                        ; Graphic data (used by the routine at #R36805)
portalloc1:                            ; 32944
       byte 0,0                                                      ; Address of the portal's location in the attribute buffer
                                                                     ; at #R23552 (used by the routine at #R36805)
portalloc2:                            ; 32946
       byte 0,0                                                      ; Address of the portal's location in the screen buffer at
                                                                     ; #R24576 (used by the routine at #R36805)

* Item graphic
*
* The item graphic is copied here by the routine at #R34436, and then used by
* the routine at #R36707.
item:                                  ; 32948
       bss 8

* Remaining air supply
*
* Initialised (always to #b63 in practice) and used by the routine at #R34436,
* updated by the routine at #R35388, and also used by the routine at #R36904.
* Its value ranges from #b36 to #b63 and is actually the LSB of the display
* file address for the cell at the right end of the air bar. The amount of air
* to draw in this cell is determined by the value of the game clock at #R32957.
air:                                   ; 32956
       byte 0

* Game clock
*
* Initialised by the routine at #R34436, updated on every pass through the main
* loop by the routine at #R35388, and used for timing purposes by the routines
* at #R36111, #R36344 and #R37173. Its value (which is always a multiple of 4)
* is also used by the routine at #R35388 to compute the amount of air to draw
* in the cell at the right end of the air bar.
clock:                                 ; 32957
       byte 0

* Horizontal guardians
*
* The horizontal guardian definitions are copied here by the routine at
* #R34436, and then used by the routines at #R36111 and #R36266. There are four
* slots, each one seven bytes long, used to hold the state of the horizontal
* guardians in the current cavern.
* .
* For each horizontal guardian, the seven bytes are used as follows:
* .
* #TABLE(default,centre,:w)
* { =h Byte | =h Contents }
* { =r2 0 | Bit 7: animation speed (0=normal, 1=slow) }
* { Bits 0-6: attribute (BRIGHT, PAPER and INK) }
* { 1,2 | Address of the guardian's location in the attribute buffer at #R23552
* }
* { 3 | MSB of the address of the guardian's location in the screen buffer at
* #R24576 }
* { 4 | Animation frame }
* { 5 | LSB of the address of the leftmost point of the guardian's path in the
* attribute buffer }
* { 6 | LSB of the address of the rightmost point of the guardian's path in the
* attribute buffer }
* TABLE#
hguards:                               ; 32958
       bss 7                                                         ; Horizontal guardian 1
hguard2:                               ; 32965
       bss 7                                                         ; Horizontal guardian 2
       bss 7                                                         ; Horizontal guardian 3
       bss 7                                                         ; Horizontal guardian 4
       byte 0                                                        ; Terminator (set to #b255)

* Eugene's direction or the Kong Beast's status
*
* Initialised by the routine at #R34436, and used by the routines at #R36344
* (to hold Eugene's direction: 0=down, 1=up) and #R37173 (to hold the Kong
* Beast's status: 0=on the ledge, 1=falling, 2=dead).
eugdir:                                ; 32987
       byte 0

* Eugene's or the Kong Beast's pixel y-coordinate
*
* Initialised by the routine at #R34436, and used by the routines at #R34252
* (to hold the index into the message scrolled across the screen after the
* theme tune has finished playing), #R35140 (to hold the distance of the boot
* from the top of the screen as it descends onto Willy), #R36344 (to hold
* Eugene's pixel y-coordinate) and #R37173 (to hold the Kong Beast's pixel
* y-coordinate).
eughgt:                                ; 32988
       byte 0

* Vertical guardians
*
* The vertical guardian definitions are copied here by the routine at #R34436,
* and then used by the routines at #R36469 and #R36593. There are four slots,
* each one seven bytes long, used to hold the state of the vertical guardians
* in the current cavern.
* .
* For each vertical guardian, the seven bytes are used as follows:
* .
* #TABLE(default,centre,:w)
* { =h Byte | =h Contents }
* { 0 | Attribute }
* { 1 | Animation frame }
* { 2 | Pixel y-coordinate }
* { 3 | x-coordinate }
* { 4 | Pixel y-coordinate increment }
* { 5 | Minimum pixel y-coordinate }
* { 6 | Maximum pixel y-coordinate }
* TABLE#
* .
* In most of the caverns that do not have vertical guardians, this area is
* overwritten by unused bytes from the cavern definition. The exception is
* #R49152(Eugene's Lair): the routine at #R34436 copies the graphic data for
* the Eugene sprite into the last 32 bytes of this area, where it is then used
* by the routine at #R36344.
vguards:                               ; 32989
       bss 7                                                         ; Vertical guardian 1
       bss 7                                                         ; Vertical guardian 2
       bss 7                                                         ; Vertical guardian 3
       bss 7                                                         ; Vertical guardian 4
       byte 0                                                        ; Terminator (set to #b255 in caverns that have four
                                                                     ; vertical guardians)
       bss 6                                                         ; Spare

* Guardian graphic data
*
* The guardian graphic data is copied here by the routine at #R34436, and then
* used by the routines at #R36266, #R36469, #R36593 and #R37173.
ggdata:                                ; 33024
       bss 256

* Willy sprite graphic data
*
* Used by the routines at #R34252, #R34574 and #R37503.
* .
* #UDGTABLE
* { #FOR(0,3)//n/#UDGARRAY2,7,2,2;(33280+32*n)-(33297+32*n)-1-16(willyn*)/ | //
* | #UDGARRAY*willy0;willy1;willy2;willy3(willy_r) }
* { #FOR(4,7)//n/#UDGARRAY2,7,2,2;(33280+32*n)-(33297+32*n)-1-16(willyn*)/ | //
* | #UDGARRAY*willy7;willy6;willy5;willy4(willy_l) }
* TABLE#
mandat:                                ; 33280
       byte 6,0,62,0,124,0,52,0,62,0,60,0,24,0,60,0
       byte 126,0,126,0,247,0,251,0,60,0,118,0,110,0,119,0
       byte 1,128,15,128,31,0,13,0,15,128,15,0,6,0,15,0
       byte 27,128,27,128,27,128,29,128,15,0,6,0,6,0,7,0
willyr2:                               ; 33344
       byte 0,96,3,224,7,192,3,64,3,224,3,192,1,128,3,192
       byte 7,224,7,224,15,112,15,176,3,192,7,96,6,224,7,112
willyr3:                               ; 33376
       byte 0,24,0,248,1,240,0,208,0,248,0,240,0,96,0,240
       byte 1,248,3,252,7,254,6,246,0,248,1,218,3,14,3,132
       byte 24,0,31,0,15,128,11,0,31,0,15,0,6,0,15,0
       byte 31,128,63,192,127,224,111,96,31,0,91,128,112,192,33,192
       byte 6,0,7,192,3,224,2,192,7,192,3,192,1,128,3,192
       byte 7,224,7,224,14,240,13,240,3,192,6,224,7,96,14,224
       byte 1,128,1,240,0,248,0,176,1,240,0,240,0,96,0,240
       byte 1,248,1,216,1,216,1,184,0,240,0,96,0,96,0,224
       byte 0,96,0,124,0,62,0,44,0,124,0,60,0,24,0,60
       byte 0,126,0,126,0,239,0,223,0,60,0,110,0,118,0,238

* Screen buffer address lookup table
*
* Used by the routines at #R35140, #R36344, #R36469, #R36593, #R37173 and
* #R37503. The value of the Nth entry (0<=N<=127) in this lookup table is the
* screen buffer address for the point with pixel coordinates (x,y)=(0,N), with
* the origin (0,0) at the top-left corner.
sbufaddrs:                             ; 33536
       byte scrn_buffer_2%%256,scrn_buffer_2//256                                            ; y=0
       byte scrn_buffer_2+256%%256,scrn_buffer_2+256//256                                        ; y=1
       byte scrn_buffer_2+512%%256,scrn_buffer_2+512//256                                        ; y=2
       byte scrn_buffer_2+768%%256,scrn_buffer_2+768//256                                        ; y=3
       byte scrn_buffer_2+1024%%256,scrn_buffer_2+1024//256                                       ; y=4
       byte scrn_buffer_2+1280%%256,scrn_buffer_2+1280//256                                       ; y=5
       byte scrn_buffer_2+1536%%256,scrn_buffer_2+1536//256                                       ; y=6
       byte scrn_buffer_2+1792%%256,scrn_buffer_2+1792//256                                       ; y=7
       byte scrn_buffer_2+32%%256,scrn_buffer_2+32//256                                         ; y=8
       byte scrn_buffer_2+288%%256,scrn_buffer_2+288//256                                        ; y=9
       byte scrn_buffer_2+544%%256,scrn_buffer_2+544//256                                        ; y=10
       byte scrn_buffer_2+800%%256,scrn_buffer_2+800//256                                        ; y=11
       byte scrn_buffer_2+1056%%256,scrn_buffer_2+1056//256                                       ; y=12
       byte scrn_buffer_2+1312%%256,scrn_buffer_2+1312//256                                       ; y=13
       byte scrn_buffer_2+1568%%256,scrn_buffer_2+1568//256                                       ; y=14
       byte scrn_buffer_2+1824%%256,scrn_buffer_2+1824//256                                       ; y=15
       byte scrn_buffer_2+64%%256,scrn_buffer_2+64//256                                         ; y=16
       byte scrn_buffer_2+320%%256,scrn_buffer_2+320//256                                        ; y=17
       byte scrn_buffer_2+576%%256,scrn_buffer_2+576//256                                        ; y=18
       byte scrn_buffer_2+832%%256,scrn_buffer_2+832//256                                        ; y=19
       byte scrn_buffer_2+1088%%256,scrn_buffer_2+1088//256                                       ; y=20
       byte scrn_buffer_2+1344%%256,scrn_buffer_2+1344//256                                       ; y=21
       byte scrn_buffer_2+1600%%256,scrn_buffer_2+1600//256                                       ; y=22
       byte scrn_buffer_2+1856%%256,scrn_buffer_2+1856//256                                       ; y=23
       byte scrn_buffer_2+96%%256,scrn_buffer_2+96//256                                         ; y=24
       byte scrn_buffer_2+352%%256,scrn_buffer_2+352//256                                        ; y=25
       byte scrn_buffer_2+608%%256,scrn_buffer_2+608//256                                        ; y=26
       byte scrn_buffer_2+864%%256,scrn_buffer_2+864//256                                        ; y=27
       byte scrn_buffer_2+1120%%256,scrn_buffer_2+1120//256                                       ; y=28
       byte scrn_buffer_2+1376%%256,scrn_buffer_2+1376//256                                       ; y=29
       byte scrn_buffer_2+1632%%256,scrn_buffer_2+1632//256                                       ; y=30
       byte scrn_buffer_2+1888%%256,scrn_buffer_2+1888//256                                       ; y=31
       byte scrn_buffer_2+128%%256,scrn_buffer_2+128//256                                        ; y=32
       byte scrn_buffer_2+384%%256,scrn_buffer_2+384//256                                        ; y=33
       byte scrn_buffer_2+640%%256,scrn_buffer_2+640//256                                        ; y=34
       byte scrn_buffer_2+896%%256,scrn_buffer_2+896//256                                        ; y=35
       byte scrn_buffer_2+1152%%256,scrn_buffer_2+1152//256                                       ; y=36
       byte scrn_buffer_2+1408%%256,scrn_buffer_2+1408//256                                       ; y=37
       byte scrn_buffer_2+1664%%256,scrn_buffer_2+1664//256                                       ; y=38
       byte scrn_buffer_2+1920%%256,scrn_buffer_2+1920//256                                       ; y=39
       byte scrn_buffer_2+160%%256,scrn_buffer_2+160//256                                        ; y=40
       byte scrn_buffer_2+416%%256,scrn_buffer_2+416//256                                        ; y=41
       byte scrn_buffer_2+672%%256,scrn_buffer_2+672//256                                        ; y=42
       byte scrn_buffer_2+928%%256,scrn_buffer_2+928//256                                        ; y=43
       byte scrn_buffer_2+1184%%256,scrn_buffer_2+1184//256                                       ; y=44
       byte scrn_buffer_2+1440%%256,scrn_buffer_2+1440//256                                       ; y=45
       byte scrn_buffer_2+1696%%256,scrn_buffer_2+1696//256                                       ; y=46
       byte scrn_buffer_2+1952%%256,scrn_buffer_2+1952//256                                       ; y=47
       byte scrn_buffer_2+192%%256,scrn_buffer_2+192//256                                        ; y=48
       byte scrn_buffer_2+448%%256,scrn_buffer_2+448//256                                        ; y=49
       byte scrn_buffer_2+704%%256,scrn_buffer_2+704//256                                        ; y=50
       byte scrn_buffer_2+960%%256,scrn_buffer_2+960//256                                        ; y=51
       byte scrn_buffer_2+1216%%256,scrn_buffer_2+1216//256                                       ; y=52
       byte scrn_buffer_2+1472%%256,scrn_buffer_2+1472//256                                       ; y=53
       byte scrn_buffer_2+1728%%256,scrn_buffer_2+1728//256                                       ; y=54
       byte scrn_buffer_2+1984%%256,scrn_buffer_2+1984//256                                       ; y=55
       byte scrn_buffer_2+224%%256,scrn_buffer_2+224//256                                        ; y=56
       byte scrn_buffer_2+480%%256,scrn_buffer_2+480//256                                        ; y=57
       byte scrn_buffer_2+736%%256,scrn_buffer_2+736//256                                        ; y=58
       byte scrn_buffer_2+992%%256,scrn_buffer_2+992//256                                        ; y=59
       byte scrn_buffer_2+1248%%256,scrn_buffer_2+1248//256                                       ; y=60
       byte scrn_buffer_2+1504%%256,scrn_buffer_2+1504//256                                       ; y=61
       byte scrn_buffer_2+1760%%256,scrn_buffer_2+1760//256                                       ; y=62
       byte scrn_buffer_2+2016%%256,scrn_buffer_2+2016//256                                       ; y=63
       byte scrn_buffer_2+2048%%256,scrn_buffer_2+2048//256                                       ; y=64
       byte scrn_buffer_2+2304%%256,scrn_buffer_2+2304//256                                       ; y=65
       byte scrn_buffer_2+2560%%256,scrn_buffer_2+2560//256                                       ; y=66
       byte scrn_buffer_2+2816%%256,scrn_buffer_2+2816//256                                       ; y=67
       byte scrn_buffer_2+3072%%256,scrn_buffer_2+3072//256                                       ; y=68
       byte scrn_buffer_2+3328%%256,scrn_buffer_2+3328//256                                       ; y=69
       byte scrn_buffer_2+3584%%256,scrn_buffer_2+3584//256                                       ; y=70
       byte scrn_buffer_2+3840%%256,scrn_buffer_2+3840//256                                       ; y=71
       byte scrn_buffer_2+2080%%256,scrn_buffer_2+2080//256                                       ; y=72
       byte scrn_buffer_2+2336%%256,scrn_buffer_2+2336//256                                       ; y=73
       byte scrn_buffer_2+2592%%256,scrn_buffer_2+2592//256                                       ; y=74
       byte scrn_buffer_2+2848%%256,scrn_buffer_2+2848//256                                       ; y=75
       byte scrn_buffer_2+3104%%256,scrn_buffer_2+3104//256                                       ; y=76
       byte scrn_buffer_2+3360%%256,scrn_buffer_2+3360//256                                       ; y=77
       byte scrn_buffer_2+3616%%256,scrn_buffer_2+3616//256                                       ; y=78
       byte scrn_buffer_2+3872%%256,scrn_buffer_2+3872//256                                       ; y=79
       byte scrn_buffer_2+2112%%256,scrn_buffer_2+2112//256                                       ; y=80
       byte scrn_buffer_2+2368%%256,scrn_buffer_2+2368//256                                       ; y=81
       byte scrn_buffer_2+2624%%256,scrn_buffer_2+2624//256                                       ; y=82
       byte scrn_buffer_2+2880%%256,scrn_buffer_2+2880//256                                       ; y=83
       byte scrn_buffer_2+3136%%256,scrn_buffer_2+3136//256                                       ; y=84
       byte scrn_buffer_2+3392%%256,scrn_buffer_2+3392//256                                       ; y=85
       byte scrn_buffer_2+3648%%256,scrn_buffer_2+3648//256                                       ; y=86
       byte scrn_buffer_2+3904%%256,scrn_buffer_2+3904//256                                       ; y=87
       byte scrn_buffer_2+2144%%256,scrn_buffer_2+2144//256                                       ; y=88
       byte scrn_buffer_2+2400%%256,scrn_buffer_2+2400//256                                       ; y=89
       byte scrn_buffer_2+2656%%256,scrn_buffer_2+2656//256                                       ; y=90
       byte scrn_buffer_2+2912%%256,scrn_buffer_2+2912//256                                       ; y=91
       byte scrn_buffer_2+3168%%256,scrn_buffer_2+3168//256                                       ; y=92
       byte scrn_buffer_2+3424%%256,scrn_buffer_2+3424//256                                       ; y=93
       byte scrn_buffer_2+3680%%256,scrn_buffer_2+3680//256                                       ; y=94
       byte scrn_buffer_2+3936%%256,scrn_buffer_2+3936//256                                       ; y=95
       byte scrn_buffer_2+2176%%256,scrn_buffer_2+2176//256                                       ; y=96
       byte scrn_buffer_2+2432%%256,scrn_buffer_2+2432//256                                       ; y=97
       byte scrn_buffer_2+2688%%256,scrn_buffer_2+2688//256                                       ; y=98
       byte scrn_buffer_2+2944%%256,scrn_buffer_2+2944//256                                       ; y=99
       byte scrn_buffer_2+3200%%256,scrn_buffer_2+3200//256                                       ; y=100
       byte scrn_buffer_2+3456%%256,scrn_buffer_2+3456//256                                       ; y=101
       byte scrn_buffer_2+3712%%256,scrn_buffer_2+3712//256                                       ; y=102
       byte scrn_buffer_2+3968%%256,scrn_buffer_2+3968//256                                       ; y=103
       byte scrn_buffer_2+2208%%256,scrn_buffer_2+2208//256                                       ; y=104
       byte scrn_buffer_2+2464%%256,scrn_buffer_2+2464//256                                       ; y=105
       byte scrn_buffer_2+2720%%256,scrn_buffer_2+2720//256                                       ; y=106
       byte scrn_buffer_2+2976%%256,scrn_buffer_2+2976//256                                       ; y=107
       byte scrn_buffer_2+3232%%256,scrn_buffer_2+3232//256                                       ; y=108
       byte scrn_buffer_2+3488%%256,scrn_buffer_2+3488//256                                       ; y=109
       byte scrn_buffer_2+3744%%256,scrn_buffer_2+3744//256                                       ; y=110
       byte scrn_buffer_2+4000%%256,scrn_buffer_2+4000//256                                       ; y=111
       byte scrn_buffer_2+2240%%256,scrn_buffer_2+2240//256                                       ; y=112
       byte scrn_buffer_2+2496%%256,scrn_buffer_2+2496//256                                       ; y=113
       byte scrn_buffer_2+2752%%256,scrn_buffer_2+2752//256                                       ; y=114
       byte scrn_buffer_2+3008%%256,scrn_buffer_2+3008//256                                       ; y=115
       byte scrn_buffer_2+3264%%256,scrn_buffer_2+3264//256                                       ; y=116
       byte scrn_buffer_2+3520%%256,scrn_buffer_2+3520//256                                       ; y=117
       byte scrn_buffer_2+3776%%256,scrn_buffer_2+3776//256                                       ; y=118
       byte scrn_buffer_2+4032%%256,scrn_buffer_2+4032//256                                       ; y=119
       byte scrn_buffer_2+2272%%256,scrn_buffer_2+2272//256                                       ; y=120
       byte scrn_buffer_2+2528%%256,scrn_buffer_2+2528//256                                       ; y=121
       byte scrn_buffer_2+2784%%256,scrn_buffer_2+2784//256                                       ; y=122
       byte scrn_buffer_2+3040%%256,scrn_buffer_2+3040//256                                       ; y=123
       byte scrn_buffer_2+3296%%256,scrn_buffer_2+3296//256                                       ; y=124
       byte scrn_buffer_2+3552%%256,scrn_buffer_2+3552//256                                       ; y=125
       byte scrn_buffer_2+3808%%256,scrn_buffer_2+3808//256                                       ; y=126
       byte scrn_buffer_2+4064%%256,scrn_buffer_2+4064//256                                       ; y=127

sbufaddrs_msb_byte:
       equ  bytes+(sbufaddrs//256)     ; Unsigned division

* Current cavern number
*
* Initialised by the routine at #R34252, used by the routines at #R34436,
* #R34574, #R35445 and #R36266, and updated by the routine at #R36904.
sheet:                                 ; 33799
       byte 0

* Left-right movement table
*
* Used by the routine at #R35805. The entries in this table are used to map the
* existing value (V) of Willy's direction and movement flags at #R32874 to a
* new value (V'), depending on the direction Willy is facing and how he is
* moving or being moved (by 'left' and 'right' keypresses and joystick input,
* or by a conveyor).
* .
* One of the first four entries is used when Willy is not moving.
lrmovement:                            ; 33800
       byte 0                                                        ; V=0 (facing right, no movement) + no movement: V'=0 (no
                                                                     ; change)
       byte 1                                                        ; V=1 (facing left, no movement) + no movement: V'=1 (no
                                                                     ; change)
       byte 0                                                        ; V=2 (facing right, moving) + no movement: V'=0 (facing
                                                                     ; right, no movement) (i.e. stop)
       byte 1                                                        ; V=3 (facing left, moving) + no movement: V'=1 (facing
                                                                     ; left, no movement) (i.e. stop)
* One of the next four entries is used when Willy is moving left.
       byte 1                                                        ; V=0 (facing right, no movement) + move left: V'=1
                                                                     ; (facing left, no movement) (i.e. turn around)
       byte 3                                                        ; V=1 (facing left, no movement) + move left: V'=3 (facing
                                                                     ; left, moving)
       byte 1                                                        ; V=2 (facing right, moving) + move left: V'=1 (facing
                                                                     ; left, no movement) (i.e. turn around)
       byte 3                                                        ; V=3 (facing left, moving) + move left: V'=3 (no change)
* One of the next four entries is used when Willy is moving right.
       byte 2                                                        ; V=0 (facing right, no movement) + move right: V'=2
                                                                     ; (facing right, moving)
       byte 0                                                        ; V=1 (facing left, no movement) + move right: V'=0
                                                                     ; (facing right, no movement) (i.e. turn around)
       byte 2                                                        ; V=2 (facing right, moving) + move right: V'=2 (no
                                                                     ; change)
       byte 0                                                        ; V=3 (facing left, moving) + move right: V'=0 (facing
                                                                     ; right, no movement) (i.e. turn around)
* One of the final four entries is used when Willy is being pulled both left
* and right; each entry leaves the flags at #R32874 unchanged (so Willy carries
* on moving in the direction he's already moving, or remains stationary).
       byte 0                                                        ; V=V'=0 (facing right, no movement)
       byte 1                                                        ; V=V'=1 (facing left, no movement)
       byte 2                                                        ; V=V'=2 (facing right, moving)
       byte 3                                                        ; V=V'=3 (facing left, moving)

* 'AIR'
*
* Used by the routine at #R34436.
messair:                               ; 33816
       text 'AIR'

* Unused
       text '0000'

* High score
*
* Used by the routine at #R34574 and updated by the routine at #R35140.
hghscor:                               ; 33823
       text '000000'

* Score
*
* Initialised by the routine at #R34436, and used by the routines at #R34574,
* #R35140, #R36904 and #R37098.
score:                                 ; 33829
       text '0000'                                                   ; Overflow digits (these may be updated, but are never
                                                                     ; printed)
scorbuf:                               ; 33833
       text '000000'

* 'High Score 000000#SPACE(3)Score 000000'
*
* Used by the routine at #R34436.
messhssc:                              ; 33839
       text 'HIGH SCORE 000000   SCORE 000000'

* 'Game'
*
* Used by the routine at #R35140.
messg:                                 ; 33871
       text 'GAME'

* 'Over'
*
* Used by the routine at #R35140.
messo:                                 ; 33875
       text 'OVER'

* Lives remaining
*
* Initialised to 2 by the routine at #R34252, and used and updated by the
* routines at #R34574 and #R37098.
nomen:                                 ; 33879
       byte 0

* Screen flash counter
*
* Initialised by the routine at #R34252, and used by the routines at #R34574
* and #R37098.
flash:                                 ; 33880
       byte 0

* Kempston joystick indicator
*
* Initialised by the routine at #R34252, and used by the routines at #R34574,
* #R35805 and #R37687. Holds 1 if a joystick is present, 0 otherwise.
kemp:                                  ; 33881
       byte 0

* Game mode indicator
*
* Initialised by the routine at #R34252, and used by the routines at #R34436,
* #R34574 and #R36904. Holds #b0 when a game is in progress, or a value from
* #b1 to #b64 when in demo mode.
demo:                                  ; 33882
       byte 0

* In-game music note index
*
* Initialised by the routine at #R34252, and used and updated by the routine at
* #R34574.
noteindex:                             ; 33883
       byte 0

* Music flags
*
* The keypress flag in bit 0 is initialised by the routine at #R34252; bits 0
* and 1 are checked and updated by the routine at #R34574.
* .
* #TABLE(default,centre,:w)
* { =h Bit(s) | =h Meaning }
* { 0 | Keypress flag (set=H-ENTER being pressed, reset=no key pressed) }
* { 1 | In-game music flag (set=music off, reset=music on) }
* { 2-7 | Unused }
* TABLE#
musicflags:                            ; 33884
       byte 0

* 6031769 key counter
*
* Used by the routines at #R34574 and #R36904.
cheat:                                 ; 33885
       byte 0

* 6031769
*
* Used by the routine at #R34574. In each pair of bytes here, bits 0-4 of the
* first byte correspond to keys 1-2-3-4-5, and bits 0-4 of the second byte
* correspond to keys 0-9-8-7-6; among those bits, a zero indicates a key being
* pressed.
       byte :00011111,:00011111                                      ; (no keys pressed)
cheatdt:                               ; 33888
       byte :00011111,:00001111                                      ; 6
       byte :00011111,:00011110                                      ; 0
       byte :00011011,:00011111                                      ; 3
       byte :00011110,:00011111                                      ; 1
       byte :00011111,:00010111                                      ; 7
       byte :00011111,:00001111                                      ; 6
       byte :00011111,:00011101                                      ; 9

* Title screen tune data (The Blue Danube)
*
* Used by the routine at #R37596. The tune data is organised into 95 groups of
* three bytes each, one group for each note in the tune. The first byte in each
* group determines the duration of the note, and the second and third bytes
* determine the frequency (and also the piano keys that light up).
themetune:                             ; 33902
       byte 80,128,129
       byte 80,102,103
       byte 80,86,87
       byte 50,86,87
       byte 50,171,203
       byte 50,43,51
       byte 50,43,51
       byte 50,171,203
       byte 50,51,64
       byte 50,51,64
       byte 50,171,203
       byte 50,128,129
       byte 50,128,129
       byte 50,102,103
       byte 50,86,87
       byte 50,96,86
       byte 50,171,192
       byte 50,43,48
       byte 50,43,48
       byte 50,171,192
       byte 50,48,68
       byte 50,48,68
       byte 50,171,192
       byte 50,136,137
       byte 50,136,137
       byte 50,114,115
       byte 50,76,77
       byte 50,76,77
       byte 50,171,192
       byte 50,38,48
       byte 50,38,48
       byte 50,171,192
       byte 50,48,68
       byte 50,48,68
       byte 50,171,192
       byte 50,136,137
       byte 50,136,137
       byte 50,114,115
       byte 50,76,77
       byte 50,76,77
       byte 50,171,203
       byte 50,38,51
       byte 50,38,51
       byte 50,171,203
       byte 50,51,64
       byte 50,51,64
       byte 50,171,203
       byte 50,128,129
       byte 50,128,129
       byte 50,102,103
       byte 50,86,87
       byte 50,64,65
       byte 50,128,171
       byte 50,32,43
       byte 50,32,43
       byte 50,128,171
       byte 50,43,51
       byte 50,43,51
       byte 50,128,171
       byte 50,128,129
       byte 50,128,129
       byte 50,102,103
       byte 50,86,87
       byte 50,64,65
       byte 50,128,152
       byte 50,32,38
       byte 50,32,38
       byte 50,128,152
       byte 50,38,48
       byte 50,38,48
       byte 50,0,0
       byte 50,114,115
       byte 50,114,115
       byte 50,96,97
       byte 50,76,77
       byte 50,76,153
       byte 50,76,77
       byte 50,76,77
       byte 50,76,153
       byte 50,91,92
       byte 50,86,87
       byte 50,51,205
       byte 50,51,52
       byte 50,51,52
       byte 50,51,205
       byte 50,64,65
       byte 50,102,103
       byte 100,102,103
       byte 50,114,115
       byte 100,76,77
       byte 50,86,87
       byte 50,128,203
       byte 25,128,0
       byte 25,128,129
       byte 50,128,203
       byte 255                                                      ; End marker

* In-game tune data (In the Hall of the Mountain King)
*
* Used by the routine at #R34574.
gametune:                              ; 34188
       byte 128,114,102,96,86,102,86,86,81,96,81,81,86,102,86,86
       byte 128,114,102,96,86,102,86,86,81,96,81,81,86,86,86,86
       byte 128,114,102,96,86,102,86,86,81,96,81,81,86,102,86,86
       byte 128,114,102,96,86,102,86,64,86,102,128,102,86,86,86,86

* '...MANIC MINER . . #CHR(169) BUG-BYTE ltd. 1983...'
*
* Used by the routine at #R34252.
messintro:                             ; 40192
       text '.  .  .  .  .  .  .  .  .  .  . MANIC MINER . . '
       text >7f,' BUG-BYTE LTD. 1983 . . BY MATTHEW SMITH . . . '
       text 'Q TO P = LEFT & RIGHT . . BOTTOM ROW = JUMP . . '
       text 'A TO G = PAUSE . . H TO L = TUNE ON/OFF . . . '
       text 'GUIDE MINER WILLY THROUGH 20 LETHAL CAVERNS'
       text ' .  .  .  .  .  .  .  .'

