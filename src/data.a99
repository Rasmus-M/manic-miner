* Current cavern number
*
* Initialised by the routine at #R34252, used by the routines at #R34436,
* #R34574, #R35445 and #R36266, and updated by the routine at #R36904.
sheet:                                 ; 33799
       byte 0

* Left-right movement table
*
* Used by the routine at #R35805. The entries in this table are used to map the
* existing value (V) of Willy's direction and movement flags at #R32874 to a
* new value (V'), depending on the direction Willy is facing and how he is
* moving or being moved (by 'left' and 'right' keypresses and joystick input,
* or by a conveyor).
* .
* One of the first four entries is used when Willy is not moving.
lrmovement:                            ; 33800
       byte 0                                                        ; V=0 (facing right, no movement) + no movement: V'=0 (no
                                                                     ; change)
       byte 1                                                        ; V=1 (facing left, no movement) + no movement: V'=1 (no
                                                                     ; change)
       byte 0                                                        ; V=2 (facing right, moving) + no movement: V'=0 (facing
                                                                     ; right, no movement) (i.e. stop)
       byte 1                                                        ; V=3 (facing left, moving) + no movement: V'=1 (facing
                                                                     ; left, no movement) (i.e. stop)
* One of the next four entries is used when Willy is moving left.
       byte 1                                                        ; V=0 (facing right, no movement) + move left: V'=1
                                                                     ; (facing left, no movement) (i.e. turn around)
       byte 3                                                        ; V=1 (facing left, no movement) + move left: V'=3 (facing
                                                                     ; left, moving)
       byte 1                                                        ; V=2 (facing right, moving) + move left: V'=1 (facing
                                                                     ; left, no movement) (i.e. turn around)
       byte 3                                                        ; V=3 (facing left, moving) + move left: V'=3 (no change)
* One of the next four entries is used when Willy is moving right.
       byte 2                                                        ; V=0 (facing right, no movement) + move right: V'=2
                                                                     ; (facing right, moving)
       byte 0                                                        ; V=1 (facing left, no movement) + move right: V'=0
                                                                     ; (facing right, no movement) (i.e. turn around)
       byte 2                                                        ; V=2 (facing right, moving) + move right: V'=2 (no
                                                                     ; change)
       byte 0                                                        ; V=3 (facing left, moving) + move right: V'=0 (facing
                                                                     ; right, no movement) (i.e. turn around)
* One of the final four entries is used when Willy is being pulled both left
* and right; each entry leaves the flags at #R32874 unchanged (so Willy carries
* on moving in the direction he's already moving, or remains stationary).
       byte 0                                                        ; V=V'=0 (facing right, no movement)
       byte 1                                                        ; V=V'=1 (facing left, no movement)
       byte 2                                                        ; V=V'=2 (facing right, moving)
       byte 3                                                        ; V=V'=3 (facing left, moving)

* 'AIR'
*
* Used by the routine at #R34436.
messair:                               ; 33816
       text 'AIR'

* Unused
       text '0000'

* High score
*
* Used by the routine at #R34574 and updated by the routine at #R35140.
hghscor:                               ; 33823
       text '000000'

* Score
*
* Initialised by the routine at #R34436, and used by the routines at #R34574,
* #R35140, #R36904 and #R37098.
score:                                 ; 33829
       text '0000'                                                   ; Overflow digits (these may be updated, but are never
                                                                     ; printed)
scorbuf:                               ; 33833
       text '000000'

* 'High Score 000000#SPACE(3)Score 000000'
*
* Used by the routine at #R34436.
messhssc:                              ; 33839
       text 'HIGH SCORE 000000   SCORE 000000'

* 'Game'
*
* Used by the routine at #R35140.
messg:                                 ; 33871
       text 'GAME'

* 'Over'
*
* Used by the routine at #R35140.
messo:                                 ; 33875
       text 'OVER'

* Lives remaining
*
* Initialised to 2 by the routine at #R34252, and used and updated by the
* routines at #R34574 and #R37098.
nomen:                                 ; 33879
       byte 0

* Screen flash counter
*
* Initialised by the routine at #R34252, and used by the routines at #R34574
* and #R37098.
flash:                                 ; 33880
       byte 0

* Kempston joystick indicator
*
* Initialised by the routine at #R34252, and used by the routines at #R34574,
* #R35805 and #R37687. Holds 1 if a joystick is present, 0 otherwise.
kemp:                                  ; 33881
       byte 0

* Game mode indicator
*
* Initialised by the routine at #R34252, and used by the routines at #R34436,
* #R34574 and #R36904. Holds #b0 when a game is in progress, or a value from
* #b1 to #b64 when in demo mode.
demo:                                  ; 33882
       byte 0

* In-game music note index
*
* Initialised by the routine at #R34252, and used and updated by the routine at
* #R34574.
noteindex:                             ; 33883
       byte 0

* Music flags
*
* The keypress flag in bit 0 is initialised by the routine at #R34252; bits 0
* and 1 are checked and updated by the routine at #R34574.
* .
* #TABLE(default,centre,:w)
* { =h Bit(s) | =h Meaning }
* { 0 | Keypress flag (set=H-ENTER being pressed, reset=no key pressed) }
* { 1 | In-game music flag (set=music off, reset=music on) }
* { 2-7 | Unused }
* TABLE#
musicflags:                            ; 33884
       byte 0

* 6031769 key counter
*
* Used by the routines at #R34574 and #R36904.
cheat:                                 ; 33885
       byte 0

* 6031769
*
* Used by the routine at #R34574. In each pair of bytes here, bits 0-4 of the
* first byte correspond to keys 1-2-3-4-5, and bits 0-4 of the second byte
* correspond to keys 0-9-8-7-6; among those bits, a zero indicates a key being
* pressed.
       byte :00011111,:00011111                                      ; (no keys pressed)
cheatdt:                               ; 33888
       byte :00011111,:00001111                                      ; 6
       byte :00011111,:00011110                                      ; 0
       byte :00011011,:00011111                                      ; 3
       byte :00011110,:00011111                                      ; 1
       byte :00011111,:00010111                                      ; 7
       byte :00011111,:00001111                                      ; 6
       byte :00011111,:00011101                                      ; 9

* Title screen tune data (The Blue Danube)
*
* Used by the routine at #R37596. The tune data is organised into 95 groups of
* three bytes each, one group for each note in the tune. The first byte in each
* group determines the duration of the note, and the second and third bytes
* determine the frequency (and also the piano keys that light up).
themetune:                             ; 33902
       byte 80,128,129
       byte 80,102,103
       byte 80,86,87
       byte 50,86,87
       byte 50,171,203
       byte 50,43,51
       byte 50,43,51
       byte 50,171,203
       byte 50,51,64
       byte 50,51,64
       byte 50,171,203
       byte 50,128,129
       byte 50,128,129
       byte 50,102,103
       byte 50,86,87
       byte 50,96,86
       byte 50,171,192
       byte 50,43,48
       byte 50,43,48
       byte 50,171,192
       byte 50,48,68
       byte 50,48,68
       byte 50,171,192
       byte 50,136,137
       byte 50,136,137
       byte 50,114,115
       byte 50,76,77
       byte 50,76,77
       byte 50,171,192
       byte 50,38,48
       byte 50,38,48
       byte 50,171,192
       byte 50,48,68
       byte 50,48,68
       byte 50,171,192
       byte 50,136,137
       byte 50,136,137
       byte 50,114,115
       byte 50,76,77
       byte 50,76,77
       byte 50,171,203
       byte 50,38,51
       byte 50,38,51
       byte 50,171,203
       byte 50,51,64
       byte 50,51,64
       byte 50,171,203
       byte 50,128,129
       byte 50,128,129
       byte 50,102,103
       byte 50,86,87
       byte 50,64,65
       byte 50,128,171
       byte 50,32,43
       byte 50,32,43
       byte 50,128,171
       byte 50,43,51
       byte 50,43,51
       byte 50,128,171
       byte 50,128,129
       byte 50,128,129
       byte 50,102,103
       byte 50,86,87
       byte 50,64,65
       byte 50,128,152
       byte 50,32,38
       byte 50,32,38
       byte 50,128,152
       byte 50,38,48
       byte 50,38,48
       byte 50,0,0
       byte 50,114,115
       byte 50,114,115
       byte 50,96,97
       byte 50,76,77
       byte 50,76,153
       byte 50,76,77
       byte 50,76,77
       byte 50,76,153
       byte 50,91,92
       byte 50,86,87
       byte 50,51,205
       byte 50,51,52
       byte 50,51,52
       byte 50,51,205
       byte 50,64,65
       byte 50,102,103
       byte 100,102,103
       byte 50,114,115
       byte 100,76,77
       byte 50,86,87
       byte 50,128,203
       byte 25,128,0
       byte 25,128,129
       byte 50,128,203
       byte 255                                                      ; End marker

* In-game tune data (In the Hall of the Mountain King)
*
* Used by the routine at #R34574.
gametune:                              ; 34188
       byte 128,114,102,96,86,102,86,86,81,96,81,81,86,102,86,86
       byte 128,114,102,96,86,102,86,86,81,96,81,81,86,86,86,86
       byte 128,114,102,96,86,102,86,86,81,96,81,81,86,102,86,86
       byte 128,114,102,96,86,102,86,64,86,102,128,102,86,86,86,86

